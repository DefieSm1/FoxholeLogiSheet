<div class="container">
    @foreach (var inputItem in InputNames.Select((value, index) => new { value, index }))
    {
        <div class="item-box" style="background-image: url(icons/ProductionIcons/@(GetItemCategory("input", inputItem.index))/@(inputItem.value.Trim('$')).png); border: @GetItemHighlight(inputItem.value)"
             @onmouseover="() => OnMouseOver!(inputItem.value)"
             @onmouseout="() => OnMouseOut!(inputItem.value)">
             @(InputAmounts[inputItem.index] * Multiplier)@(inputItem.value.Contains('$') ? SpecialSymbol : "")
        </div>    
    }

    <div class="recipe-info" style="@(OutputAmounts.Count() == 0 ? "background-image: none;" : "")">
        <p style="opacity: @(PowerConsumption == 0 ? 0 : 1)"><span class="power-icon"></span>@(PowerConsumption * -1) MW</p>
        <p>@GetTimestamp(ProductionTime * Multiplier)</p>
    </div>

    @foreach (var outputItem in OutputNames.Select((value, index) => new { value, index }))
    {
        <div class="item-box" style="background-image: url(icons/ProductionIcons/@(GetItemCategory("output", outputItem.index))/@(outputItem.value.Trim('$')).png); border: @GetItemHighlight(outputItem.value)"
             @onmouseover="() => OnMouseOver!(outputItem.value)"
             @onmouseout="() => OnMouseOut!(outputItem.value)">
             @(OutputAmounts[outputItem.index] * Multiplier)@(outputItem.value.Contains('$') ? SpecialSymbol : "")
        </div>
    }

    <input type="number" min="1" value="@Multiplier" @onchange="(e) => Multiplier = int.Parse(e.Value!.ToString()!)" />
</div>

@code {
    [Parameter]
    public Data.FacilityRecipe Recipe { get; set; } = new();

    [Parameter]
    public string? SelectedItem { get; set; } = null;

    [Parameter]
    public string SpecialSymbol { get; set; } = "";

    [Parameter, EditorRequired]
    public Action<string>? OnMouseOver { get; set; }

    [Parameter, EditorRequired]
    public Action<string>? OnMouseOut { get; set; }

    public List<string> InputNames { get => Recipe.InputNames; }

    public List<float> InputAmounts { get => Recipe.InputAmounts; }

    public List<string> OutputNames { get => Recipe.OutputNames; }

    public List<float> OutputAmounts { get => Recipe.OutputAmounts; }

    public float PowerConsumption { get => Recipe.PowerConsumption; }

    public int ProductionTime { get => Recipe.ProductionTime; }

    public int Multiplier { get; set; } = 1;

    public string GetItemHighlight(string item) => (SelectedItem == item || "$" + SelectedItem == item) ? "2px dashed #6098E6" : "inherit";

    public string GetTimestamp(int seconds) => TimeSpan.FromSeconds(seconds).ToString(TimeSpan.FromSeconds(seconds).Days > 0 ? @"d\:hh\:mm\:ss" : @"h\:mm\:ss");

    public string GetItemCategory(string place, int index)
    {
        Data.ProductionItem item = new();

        if (place == "input") item = Recipe.InputItemData[index];
        else if (place == "output") item = Recipe.OutputItemData[index];

        if (item.ImportCategory == string.Empty) return "Facility";

        return item.ImportCategory;
    }
}
