@using FoxholeLogiSheet.Data

<div class="infobox item-infobox d-@(Visibility ? "block" : "none")">
	<div class="infobox-header">
		<p>@Item.Name</p>
	</div>
	<div class="item-info">
		<p class="item-category">@Item.Category</p>
		<p class="item-description">@Item.Description</p>
		@if(!Simplified)
		{
			@if(!String.IsNullOrEmpty(Item.AmmoUsed))
			{
				<p class="item-ammoused">@Item.AmmoUsed</p>
			}
			@if(!String.IsNullOrEmpty(Item.DamageType))
			{
				<p class="item-damagetype">Deals @Item.DamageType damage</p>
			}
			@foreach(string info in Item.DamageInfo!) 
			{
				<p class="item-damageinfo  @(SelectedCategory == "Uniforms" ? "item-cratesize" : "")">@info</p>
			}
			@if(Item.CrateSize > 0)
			{
				<p class="item-cratesize">Produces a crate of @(Item.CrateSize)x @(Item.Name)(s)</p>
			}
			@if(!String.IsNullOrEmpty(Item.BaseVehicle) && BaseVehicle != null)
			{
				<p class="item-damageinfo">Requires base vehicle: @BaseVehicle.Name (@BaseVehicle.Category)</p>
			}
			@if(Item.ProductionTime > 0)
			{ 
				<p class="item-damageinfo">
					@GetTimestamp(Item.ProductionTime)
				</p>
			}
			@if(CurrentBuilding == "Factory" || CurrentBuilding == "MPF")
			{
				<p class="item-cratesize">
					<i>Hold SHIFT when clicking to @(CurrentBuilding == "Factory" ? "add 4 of the item to queue" : "fill queue with the item")</i>
				</p>
			}
			<div class="item-costs">
				<div class="@(Item.BmatCost > 0 ? "" : "d-none")">
					<img src="icons/ProductionIcons/MaterialBasic.png" /> 
					<span>@(Item.BmatCost * (SelectedCategory == "Vehicles" || SelectedCategory == "Shippables" ? Item.CrateSize : 1)) - Basic Materials</span>
				</div>
				<div class="@(Item.RmatCost > 0 ? "" : "d-none")">
					<img src="icons/ProductionIcons/MaterialRefined.png" /> 
					<span>@(Item.RmatCost * (SelectedCategory == "Vehicles" || SelectedCategory == "Shippables" ? Item.CrateSize : 1)) - Refined Materials</span>
				</div>
				<div class="@(Item.EmatCost > 0 ? "" : "d-none")">
					<img src="icons/ProductionIcons/MaterialExplosive.png" /> 
					<span>@(Item.EmatCost * (SelectedCategory == "Vehicles" || SelectedCategory == "Shippables" ? Item.CrateSize : 1)) - Explosive Materials</span>
				</div>
				<div class="@(Item.HematCost > 0 ? "" : "d-none")">
					<img src="icons/ProductionIcons/MaterialHeavyExplosive.png" /> 
					<span>@(Item.HematCost * (SelectedCategory == "Vehicles" || SelectedCategory == "Shippables" ? Item.CrateSize : 1)) - Heavy Explosive Materials</span>
				</div>
				<div class="@(Item.CmatCost > 0 ? "" : "d-none")">
					<img src="icons/Facility/MaterialConstruction.png" /> 
					<span>@(Item.CmatCost) - Construction Materials</span>
				</div>
				<div class="@(Item.PCmatCost > 0 ? "" : "d-none")">
					<img src="icons/Facility/MaterialProcessedConstruction.png" /> 
					<span>@(Item.PCmatCost) - Processed Construction Materials</span>
				</div>
				<div class="@(Item.SteelCost > 0 ? "" : "d-none")">
					<img src="icons/Facility/MaterialSteel.png" /> 
					<span>@(Item.SteelCost) - Steel Construction Materials</span>
				</div>
				@for(int i = 0; i < Item.AssmatCost.Count(); i++)
				{
					<div class="@(Item.AssmatCost[i] > 0 ? "" : "d-none")">
						<img src="icons/Facility/AssemblyMaterialsT@(i+1).png" />
						<span>@(Item.AssmatCost[i]) - Assembly Materials @ToRoman(i + 1)</span>
					</div>
				}
			</div>
		}
	</div>
</div>

@code {
	[Parameter]
	public ProductionItem Item { get; set; } = new();

	[Parameter]
	public ProductionItem? BaseVehicle { get; set; } = null;

	[Parameter]
	public string CurrentBuilding { get; set; } = "";

	[Parameter]
	public string SelectedCategory { get; set; } = "";

	[Parameter]
	public bool Visibility { get; set; } = false;

	[Parameter]
	public bool Simplified { get; set; } = false;

	public string GetTimestamp(double seconds) 
	{
		if(CurrentBuilding == "MPF")
		{
			seconds *= 10;
		}

		return TimeSpan.FromSeconds(seconds).ToString(TimeSpan.FromSeconds(seconds).Days > 0 ? @"d\:hh\:mm\:ss" : @"h\:mm\:ss");
	}

	public static string ToRoman(int number)
	{
		if ((number < 0) || (number > 8)) throw new ArgumentOutOfRangeException("Insert value betwheen 1 and 8");
		if (number < 1) return string.Empty;
		if (number >= 5) return "V" + ToRoman(number - 5);
		if (number >= 4) return "IV" + ToRoman(number - 4);
		if (number >= 1) return "I" + ToRoman(number - 1);
		throw new ArgumentOutOfRangeException("Wrong number put into ToRoman function");
	}
}
