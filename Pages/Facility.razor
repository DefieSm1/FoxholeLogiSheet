@page "/facility"

<PageTitle>Facility Sheet</PageTitle>

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@using FoxholeLogiSheet.Data

<PageHeader>Facility Sheet</PageHeader>

<ProductionContainer>
	<CalculatorContainer Width="@((FacilityBuildingSet.Count() * 100).ToString() + "px")">
		<CalculatorHeader Text="SELECT STRUCTURE">
			<HeaderButton Text="@($"Switch to {(BuildingSet == "Gathering" ? "Manufacturing" : "Gathering")}")" 
						  ParentMethod="@(() => { BuildingSet = BuildingSet == "Gathering" ? "Manufacturing" : "Gathering"; SelectedBuilding = BuildingSet == "Gathering" ? "HarvesterSalvage" : "MaterialsFactory"; } )" />
		</CalculatorHeader>
		<ItemGrid Columns=@(FacilityBuildingSet.Count()) Rows=1>
			@foreach (KeyValuePair<string, ProductionItem> building in FacilityBuildingSet)
			{
				<ItemButton ItemName=@building.Key Category="Facility" Disabled=@(SelectedBuilding == building.Key) IconSet="buildings" Border="@GetBuildingHighlight(building.Key)"
							OnMouseOver="() => { HoveredItem = FacilityBuildings[building.Key]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = FacilityBuildings[building.Key]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => { SelectedUpgrade = SelectedBuilding == building.Key ? SelectedUpgrade : String.Empty; SelectedBuilding = building.Key; StateHasChanged(); }" />
			}
		</ItemGrid>
	</CalculatorContainer>
</ProductionContainer>

<ProductionContainer>
	<CalculatorContainer Width="380px" Height="515px">
		<CalculatorHeader Text="FIND ITEM" >
			<HeaderButton Text="Unselect" ParentMethod="() => { SelectedItem = String.Empty; HighlightBuildings(); StateHasChanged(); }" />
			<button class="item-select-info"
					@onmouseover="() => ItemTooltipVisible = true"
					@onmouseout="() => ItemTooltipVisible = false">
					?
			</button>
		</CalculatorHeader>
		<ItemGrid Columns="5" Rows="1" OverflowScroll=true>
			@foreach (KeyValuePair<string, ProductionItem> item in FacilityItems)
			{
				@if(item.Value.Faction == (CurrentFaction == "W" ? "C" : "W")) continue;
				<ItemButton ItemName=@item.Key Category="Facility" Disabled=@(SelectedItem == item.Key) IconSet="items"
							OnMouseOver="() => { HoveredItem = FacilityItems[item.Key]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = FacilityItems[item.Key]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => { SelectedItem = item.Key; SelectedItem = item.Key; HighlightBuildings(); StateHasChanged(); }" />
			}
		</ItemGrid>
	</CalculatorContainer>
	<CalculatorContainer Width="120px">
		<CalculatorHeader Text="UPGRADES" />
		<ItemGrid Columns="1" Rows="1">
			@foreach (string upgrade in CurrentBuilding.BuildingUpgrades)
			{
				<ItemButton ItemName=@upgrade Category="Facility" Disabled=@(SelectedUpgrade == upgrade) IconSet="buildings" Border="@GetBuildingHighlight(upgrade)"
							OnMouseOver="() => { HoveredItem = FacilityBuildingUpgrades[upgrade]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = FacilityBuildingUpgrades[upgrade]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => { SelectedUpgrade = upgrade; StateHasChanged(); }" />
			}
			@if (CurrentBuilding.BuildingUpgrades.Count == 0)
			{
				<div class="no-upgrades"><i>No upgrades!</i></div>
			}
		</ItemGrid>
	</CalculatorContainer>
	<CalculatorContainer Height="fit-content; max-height: 516px; overflow-y: auto">
		<CalculatorHeader Text=@CurrentBuilding.Name.ToUpper() />
		@if (CurrentBuilding.BuildingRecipes.Count > 0)
		{	
			<FacilityRecipeList>
				@foreach (FacilityRecipe recipe in CurrentBuilding.BuildingRecipes)
				{
					@if (recipe.Faction == (CurrentFaction == "W" ? "C" : "W")) continue;
					<FacilityRecipeBar Recipe=@recipe SelectedItem=@SelectedItem
									   OnMouseOver="(item) => { HoveredItem = FacilityItems[item.Trim('$')]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
									   OnMouseOut="(item) => { HoveredItem = FacilityItems[item.Trim('$')]; TooltipVisibility = false; StateHasChanged(); }" />
				}
			</FacilityRecipeList>
		}
		@if (!String.IsNullOrEmpty(SelectedUpgrade))
		{
			<CalculatorHeader Text=@CurrentUpgrade.Name.ToUpper() />
			@if(CurrentUpgrade.BuildingRecipes.Count > 0)
			{	
				<FacilityRecipeList>
					@foreach (FacilityRecipe recipe in CurrentUpgrade.BuildingRecipes)
					{
						@if (recipe.Faction == (CurrentFaction == "W" ? "C" : "W")) continue;
						<FacilityRecipeBar Recipe=@recipe SelectedItem=@SelectedItem
										   OnMouseOver="(item) => { HoveredItem = FacilityItems[item.Trim('$')]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
										   OnMouseOut="(item) => { HoveredItem = FacilityItems[item.Trim('$')]; TooltipVisibility = false; StateHasChanged(); }" />
					}
				</FacilityRecipeList>
			}
		}
	</CalculatorContainer>
</ProductionContainer>

<ItemTooltip Item=@HoveredItem CurrentBuilding="Facility" SelectedCategory="Building" Visibility=@TooltipVisibility Simplified=@TooltipSimplified MaterialKeys=@MaterialKeys />

<CustomTooltip Visibility=@ItemTooltipVisible Header="Find facility items!">
	<p>Click an item to find out in what building and/or upgrade it is made and/or used.</p>
	<p>A <span style="color: #EB1F00">red border</span> means that building/upgrade can <b style="color: #EB1F00">use</b> that item in one or more of its recipes.</p>
	<p>A <span style="color: #3DAD32">green border</span> means that it can <b style="color: #3DAD32">make</b> that item in one or more of its recipes.</p>
	<p>A <span style="color: #6098E6">blue border</span> means that it contains both recipes that <b style="color: #EB1F00">use</b> <i style="color: #6098E6"><b>and</b></i> <b style="color: #3DAD32">make</b> that item.</p>
	<p>A building that doesn't use or make the recipe will still be highlighted if one of its upgrades do.</p>
	<p>Within the recipe list itself, the selected item will be also given a <span style="color: #6098E6">blue border.</span></p>
</CustomTooltip>

@code {
	public Dictionary<string, ProductionItem> FacilityBuildings = new();

	public Dictionary<string, ProductionItem> FacilityBuildingUpgrades = new();

	public Dictionary<string, ProductionItem> FacilityItems { get; set; } = new();

	public List<string> LoadedCategories { get; set; } = ["Facility"];

	public List<string> MaterialKeys { get; set; } = ["MaterialBasic", "MaterialConstruction", "MaterialProcessedConstruction", "MaterialSteel", "MaterialRareAlloys"];

	public string SelectedBuilding { get; set; } = "";

	public string SelectedUpgrade { get; set; } = "";

	public string BuildingSet { get; set; } = "";

	public string SelectedItem = "";

	public bool ItemTooltipVisible { get; set; } = false;

	public List<string> InputHighlight = new();

	public List<string> OutputHighlight = new();

	public ProductionItem HoveredItem { get; set; } = new();

	public bool TooltipVisibility { get; set; } = false;

	public bool TooltipSimplified { get; set; } = false;

	public ProductionItem CurrentBuilding { get => FacilityBuildings.Keys.Contains(SelectedBuilding) ? FacilityBuildings[SelectedBuilding] : new(); }

	public ProductionItem CurrentUpgrade { get => FacilityBuildingUpgrades.Keys.Contains(SelectedUpgrade) ? FacilityBuildingUpgrades[SelectedUpgrade] : new(); }

	public Dictionary<string, ProductionItem> FacilityBuildingSet { get => FacilityBuildings.Where(building => building.Value.BuildingType == BuildingSet).ToDictionary(x => x.Key, x => x.Value); }

	public string CurrentFaction { get => sessionStorage.GetItem<string>("selectedFaction") ?? localStorage.GetItem<string>("selectedFaction") ?? "W"; }

	protected override async Task OnInitializedAsync()
	{
		localStorage.SetItem("lastPage", "facility");

		FacilityBuildings = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>("data/BuildingData/FacilityBuildings.json") ?? throw new FileNotFoundException();

		FacilityBuildingUpgrades = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>("data/BuildingData/FacilityUpgrades.json") ?? throw new FileNotFoundException();

		List<string> categoriesToLoad = LoadedCategories;

		FacilityItems = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>("data/ProductionData/Facility.json") ?? throw new FileNotFoundException();

		SelectedBuilding = "MaterialsFactory";
		SelectedUpgrade = "";
		BuildingSet = "Manufacturing";
	}

	public void HighlightBuildings()
	{
		InputHighlight = new();
		OutputHighlight = new();

		if (SelectedItem == null)
			return;

		foreach (string building in FacilityBuildings.Keys)
		{
			if (FacilityBuildings[building].BuildingRecipes.Any(e => e.InputNames.Contains(SelectedItem)))
				InputHighlight.Add(building);
			if (FacilityBuildings[building].BuildingRecipes.Any(e => e.OutputNames.Contains(SelectedItem)))
				OutputHighlight.Add(building);

			bool upgradeHasInput = false;
			bool upgradeHasOutput = false;

			if (FacilityBuildings[building].BuildingUpgrades == new List<string>())
				continue;

			foreach (string upgrade in FacilityBuildings[building].BuildingUpgrades)
			{
				if (FacilityBuildingUpgrades[upgrade].BuildingRecipes.Any(e => e.InputNames.Contains(SelectedItem)))
				{
					upgradeHasInput = true;
					InputHighlight.Add(upgrade);
				}
				if (FacilityBuildingUpgrades[upgrade].BuildingRecipes.Any(e => e.OutputNames.Contains(SelectedItem)))
				{
					upgradeHasOutput = true;
					OutputHighlight.Add(upgrade);
				}
			}

			if (upgradeHasInput && !InputHighlight.Contains(building))
				InputHighlight.Add(building);
			if (upgradeHasOutput && !OutputHighlight.Contains(building))
				OutputHighlight.Add(building);
		}
	}

	public string GetBuildingHighlight(string building)
	{
		bool hasInputHighlight = InputHighlight.Contains(building);
		bool hasOutputHighlight = OutputHighlight.Contains(building);

		string bothColor = "#6098E6";
		string inputColor = "#EB1F00";
		string outputColor = "#3DAD32";

		string border = "2px dashed ";

		if (hasInputHighlight && hasOutputHighlight)
			return border += bothColor;

		if (hasInputHighlight)
			return border += inputColor;

		if (hasOutputHighlight)
			return border += outputColor;

		return "inherit";
	}
}
