@page "/assembly"

<PageTitle>Assembly Sheet</PageTitle>

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using FoxholeLogiSheet.Data

<PageHeader>Assembly Sheet</PageHeader>

<ProductionContainer>
	<CalculatorContainer Width="@((AssemblyBuildings.Count() * 100).ToString() + "px")">
		<CalculatorHeader Text="SELECT STRUCTURE" />
		<ItemGrid Columns=@(AssemblyBuildings.Count) Rows=1>
			@foreach (KeyValuePair<string, ProductionItem> building in AssemblyBuildings)
			{
				<ItemButton ItemName=@building.Key Category="Assembly" Disabled=@(SelectedBuilding == building.Key) IconSet="buildings"
							OnMouseOver="() => { HoveredItem = AssemblyBuildings[building.Key]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = AssemblyBuildings[building.Key]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => { SelectedBuilding = building.Key; SelectedUpgrade = String.Empty; StateHasChanged(); }" />
			}
		</ItemGrid>
	</CalculatorContainer>
</ProductionContainer>

<ProductionContainer>
	<CalculatorContainer Width="565px">
		<CalculatorHeader Text=@CurrentBuilding.Name.ToUpper() />
		<ItemGrid Columns=6 Rows=1>
			@foreach(KeyValuePair<string, ProductionItem> item in CurrentBuildingItems)
			{
				<ItemButton ItemName=@item.Key Category="AssemblyStation" IconSet="items" 
							OnMouseOver="() => { HoveredItem = CurrentBuildingItems[item.Key]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = CurrentBuildingItems[item.Key]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => AddItem(e, SelectedBuilding, item.Key)" />
			}
		</ItemGrid>
		@if (!String.IsNullOrEmpty(SelectedUpgrade))
		{
			<CalculatorHeader Text=@CurrentUpgrade.Name.ToUpper() />
			<ItemGrid Columns=6 Rows=1>
			@foreach (KeyValuePair<string, ProductionItem> item in CurrentUpgradeItems)
			{
				<ItemButton ItemName=@item.Key Category="AssemblyStation" IconSet="items"
							OnMouseOver="() => { HoveredItem = CurrentUpgradeItems[item.Key]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = CurrentUpgradeItems[item.Key]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => AddItem(e, SelectedUpgrade, item.Key)" />
			}
			</ItemGrid>
		}
	</CalculatorContainer>
	<CalculatorContainer Width="200px">
		<CalculatorHeader Text="UPGRADES" />
		<ItemGrid Columns="2" Rows="1" >
			@foreach(string upgrade in CurrentBuilding.BuildingUpgrades)
			{
				<ItemButton ItemName=@upgrade Category="Assembly" Disabled=@(SelectedUpgrade == upgrade) IconSet="buildings"
							OnMouseOver="() => { HoveredItem = AssemblyBuildingUpgrades[upgrade]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
							OnMouseOut="() => { HoveredItem = AssemblyBuildingUpgrades[upgrade]; TooltipVisibility = false; StateHasChanged(); }"
							OnButtonClick="(e) => { SelectedUpgrade = upgrade; StateHasChanged(); }" />
			}
			@if (CurrentBuilding.BuildingUpgrades.Count == 0)
			{
				<div class="no-upgrades"><i>No upgrades!</i></div>
			}
		</ItemGrid>
	</CalculatorContainer>
	<CalculatorContainer Height="560px">
		<CalculatorHeader Text="OUTPUT" >
			<HeaderButton ParentMethod=@ResetSelectedItems Text="Reset all" />
		</CalculatorHeader>
		<div class="output-sums">
			@foreach (List<string> outputRow in MaterialOutputRows)
			{
				<OutputPriceSumContainer Columns=5>
				@foreach (string materialKey in outputRow)
				{
					@if (GetQueuePrice(materialKey) == 0) continue;
					<PriceBox MaterialTag=@materialKey Tag=false QueuePrice=@GetQueuePrice(materialKey) />
				}
				</OutputPriceSumContainer>
			}
		</div>
		<OutputContainer Rows=4>
			@foreach (string category in AssemblyBuildingNames)
			{
				if (SelectedItems[category].Count() == 0) continue;

				<OutputRow ItemKeys=SelectedItems[category] IconSet="assembly" PriceColumns=6 CategoryKey=@category
						   OnMouseOver="(itemKey) => { HoveredItem = AssemblyCategories[category][itemKey]; TooltipVisibility = true; TooltipSimplified = true; StateHasChanged(); }"
						   OnMouseOut="(itemKey) => { HoveredItem = AssemblyCategories[category][itemKey]; TooltipVisibility = false; StateHasChanged(); }"
						   OnButtonClick="(itemKey, itemNumber) => { SelectedItems[category].RemoveAt(itemNumber); TooltipVisibility = false; StateHasChanged(); }">
					@foreach (string key in MaterialKeys)
					{
						@if (GetQueuePrice(key, category) == 0) continue;
						<PriceBox MaterialTag=@key Tag=false NoTimeIcon=@(category == "AssemblyStationNavalWorks" || category == "AssemblyStationRocket") QueuePrice=@GetQueuePrice(key, category) />
					}
				</OutputRow>
			}
		</OutputContainer>
	</CalculatorContainer>
</ProductionContainer>

<ItemTooltip Item=@HoveredItem BaseVehicle=@(String.IsNullOrEmpty(HoveredItem.BaseVehicle) ? null : BaseVehicles[HoveredItem.BaseVehicle]) 
			 CurrentBuilding="Assembly"
			 Visibility=@TooltipVisibility Simplified=@TooltipSimplified Large=@(SelectedBuilding == "DryDock" || SelectedBuilding == "AssemblyLarge")
			 MaterialKeys=@MaterialKeys />

@code {
	public Dictionary<string, ProductionItem> AssemblyBuildings = new();

	public Dictionary<string, ProductionItem> AssemblyBuildingUpgrades = new();

	public Dictionary<string, Dictionary<string, ProductionItem>> AssemblyCategories { get; set; } = new();

	public List<string> CategoryKeys { get; set; } = [
		"Vehicles",
		"AssemblyStation", "AssemblyStationMotorPool","AssemblyStationRocket", "AssemblyStationBatteryLine", "AssemblyStationNavalWorks", "AssemblyStationField", "AssemblyStationTank", "AssemblyStationWeapons",
		"AssemblyLarge", "AssemblyLargeTrain", "AssemblyLargeHeavyTank",
		"DryDock"
	];

	public List<string> MaterialKeys { get; set; } = [
		"Time",
		"MaterialBasic", "MaterialConstruction", "MaterialProcessedConstruction", "MaterialSteel", "MaterialRareAlloys",
		"MaterialThermalShielding",  "MaterialUnstableSubstances", "NavalHullSegments", "NavalShellPlating", "NavalTurbineComponents",
		"AssemblyMaterialsT1", "AssemblyMaterialsT2", "AssemblyMaterialsT3", "AssemblyMaterialsT4", "AssemblyMaterialsT5"
	];

	public List<List<string>> MaterialOutputRows { get; set; } = [
		[ "MaterialBasic", "MaterialConstruction", "MaterialProcessedConstruction", "MaterialSteel", "MaterialRareAlloys" ],
		[ "MaterialThermalShielding", "MaterialUnstableSubstances", "NavalHullSegments", "NavalShellPlating", "NavalTurbineComponents" ],
		[ "AssemblyMaterialsT1", "AssemblyMaterialsT2", "AssemblyMaterialsT3", "AssemblyMaterialsT4", "AssemblyMaterialsT5" ]
	];

	Dictionary<string, List<string>> SelectedItems = new();

	public string SelectedBuilding { get; set; } = "";

	public string SelectedUpgrade { get; set; } = "";

	public ProductionItem HoveredItem { get; set; } = new();

	public bool TooltipVisibility { get; set; } = false;

	public bool TooltipSimplified { get; set; } = false;

	public ProductionItem CurrentBuilding { get => AssemblyBuildings.Keys.Contains(SelectedBuilding) ? AssemblyBuildings[SelectedBuilding] : new(); }

	public ProductionItem CurrentUpgrade { get => AssemblyBuildingUpgrades.Keys.Contains(SelectedUpgrade) ? AssemblyBuildingUpgrades[SelectedUpgrade] : new(); }

	public List<string> AssemblyBuildingNames { get => AssemblyCategories.Keys.Where((string e) => e != "Vehicles").ToList<string>(); }

	public Dictionary<string, ProductionItem> CurrentBuildingItems { get => AssemblyCategories.Keys.Contains(SelectedBuilding) ? AssemblyCategories[SelectedBuilding] : new(); }

	public Dictionary<string, ProductionItem> CurrentUpgradeItems { get => AssemblyCategories.Keys.Contains(SelectedUpgrade) ? AssemblyCategories[SelectedUpgrade] : new(); }

	public Dictionary<string, ProductionItem> BaseVehicles { get => AssemblyCategories.Keys.Contains("Vehicles") ? AssemblyCategories["Vehicles"] : new(); }

	protected override async Task OnInitializedAsync()
	{
		await localStorage.SetItemAsync("lastPage", "assembly");

		AssemblyBuildings = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>("data/BuildingData/AssemblyBuildings.json") ?? throw new FileNotFoundException();

		AssemblyBuildingUpgrades = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>("data/BuildingData/AssemblyUpgrades.json") ?? throw new FileNotFoundException();

		Dictionary<string, ProductionItem> category;
		foreach (string categoryName in CategoryKeys)
		{
			category = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>($"data/ProductionData/{categoryName}.json") ?? throw new FileNotFoundException();
			AssemblyCategories.Add(categoryName, category);
		}

		SelectedBuilding = "AssemblyStation";
		SelectedUpgrade = "";

		ResetSelectedItems();
	}

	public void ResetSelectedItems()
	{
		SelectedItems.Clear();
		foreach (string category in CategoryKeys)
			SelectedItems.Add(category, new());
	}

	public void AddItem(MouseEventArgs e, string category, string item)
	{
		if (!e.ShiftKey)
		{
			SelectedItems[category].Add(item);
			StateHasChanged();
			return;
		}

		SelectedItems[category].AddRange(Enumerable.Repeat(item, 3));
		StateHasChanged();
		return;
	}

	public double GetQueuePrice(string materialKey, string vehicleBuilding = "all")
	{
		double queuePrice = 0;

		if (SelectedItems.Count() <= 0)
			return 0;

		ProductionItem vehicleInfo = new();

		if (vehicleBuilding == "all")
		{
			foreach (string category in AssemblyBuildingNames)
			{
				queuePrice += GetQueuePrice(materialKey, category);
			}

			return queuePrice;
		}

		foreach (string item in SelectedItems[vehicleBuilding])
		{
			vehicleInfo = AssemblyCategories[vehicleBuilding][item];

			queuePrice += materialKey switch
			{
				"Time" => vehicleInfo.ProductionTime,
				"MaterialBasic" => vehicleInfo.BmatCost,
				"MaterialExplosive" => vehicleInfo.EmatCost,
				"MaterialRefined" => vehicleInfo.RmatCost,
				"MaterialHeavyExplosive" => vehicleInfo.HematCost,
				"MaterialConstruction" => vehicleInfo.CmatCost,
				"MaterialProcessedConstruction" => vehicleInfo.PCmatCost,
				"MaterialSteel" => vehicleInfo.SteelCost,
				"MaterialRareAlloys" => vehicleInfo.RareCost,
				"MaterialThermalShielding" => vehicleInfo.ShieldingCost,
				"MaterialUnstableSubstances" => vehicleInfo.SubstanceCost,
				"NavalHullSegments" => vehicleInfo.HullSegments,
				"NavalShellPlating" => vehicleInfo.ShellPlating,
				"NavalTurbineComponents" => vehicleInfo.TurbineComponents,
				"AssemblyMaterialsT1" => vehicleInfo.AssmatCost[0],
				"AssemblyMaterialsT2" => vehicleInfo.AssmatCost[1],
				"AssemblyMaterialsT3" => vehicleInfo.AssmatCost[2],
				"AssemblyMaterialsT4" => vehicleInfo.AssmatCost[3],
				"AssemblyMaterialsT5" => vehicleInfo.AssmatCost[4],
				_ => 0
			};
		}

		return queuePrice;
	}
}