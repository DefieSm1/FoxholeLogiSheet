@page "/assembly"

<PageTitle>Assembly Sheet</PageTitle>

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@using FoxholeLogiSheet.Data

<h1 class="assembly-header">Assembly Station Sheet</h1>
<div class="building-select">
	<div class="building-select-header"><p>SELECT STRUCTURE</p></div>
	<div class="building-select-buttons">
		@foreach(KeyValuePair<string, FacilityBuilding> building in AssemblyBuildings) 
		{
			<button class="assembly-building building-base @(SelectedBuilding == building.Key ? "button-disabled" : "")" 
			style="background-image: url(icons/Facility/AssemblyStation/@(building.Key).png)"
				@onmouseover="() => { HoveredBuilding = building.Value; BuildingInfoboxVisibility = true; InfoboxSimple = false; }"
				@onmouseout="() => { HoveredBuilding = building.Value; BuildingInfoboxVisibility = false; }"
				@onclick="() => { SelectedBuilding = building.Key; SelectedUpgrade = (building.Value.BuildingUpgrades.Contains(SelectedUpgrade) ? SelectedUpgrade : string.Empty); }"></button>
			foreach(string upgrade in building.Value.BuildingUpgrades)
			{
				<button class="assembly-building building-upgrade @(SelectedUpgrade == upgrade ? "button-disabled" : "")" 
				style="background-image: url(icons/Facility/AssemblyStation/@(upgrade).png)"
				@onmouseover="() => { HoveredBuilding = AssemblyUpgrades[upgrade]; BuildingInfoboxVisibility = true; InfoboxSimple = false; }"
				@onmouseout="() => { HoveredBuilding = AssemblyUpgrades[upgrade]; BuildingInfoboxVisibility = false; }"
				@onclick="() => { SelectedBuilding = building.Key; SelectedUpgrade = upgrade; }"></button>
			}
		}
	</div>
</div>
<div class="assembly-container">
	<div class="vehicle-select">
		@if(!String.IsNullOrEmpty(SelectedBuilding)) 
		{
			<div class="vehicle-select-header"><p>@AssemblyBuildings[SelectedBuilding].Name!.ToUpper()</p></div>
			<div class="vehicle-grid">
				@foreach (KeyValuePair<string, ProductionItem> item in AssemblyVehicles.GetBuildingVehicles(SelectedBuilding))
				{
					<button class="btn vehicle-button"
					style="background-image: url(icons/AssemblyStation/@(item.Key).png)"
                    @onmouseover="() => { HoveredItem = item.Value; ItemInfoboxVisibility = true; InfoboxSimple = false;; }"
					@onmouseout="() => { HoveredItem = item.Value; ItemInfoboxVisibility = false; }"
                    @onclick="() => SelectedVehicles[SelectedBuilding].Add(item.Key)"></button>
				}
			</div>
		}
		@if(!String.IsNullOrEmpty(SelectedUpgrade)) 
		{
			<div class="vehicle-select-header"><p>@AssemblyUpgrades[SelectedUpgrade].Name!.ToUpper()</p></div>
			<div class="vehicle-grid">
				@foreach (KeyValuePair<string, ProductionItem> item in AssemblyVehicles.GetBuildingVehicles(SelectedUpgrade))
				{
					<button class="btn vehicle-button"
					style="background-image: url(icons/AssemblyStation/@(item.Key).png)"
					@onmouseover="() => { HoveredItem = item.Value; ItemInfoboxVisibility = true; InfoboxSimple = false; }" 
					@onmouseout="() => { HoveredItem = item.Value; ItemInfoboxVisibility = false; }"
                    @onclick="() => SelectedVehicles[SelectedUpgrade].Add(item.Key)"></button>
				}
			</div>
		}
	</div>

    <div class="output-info">
        <div class="d-inline-flex output-header">
            <div class="output-header-text"><p>OUTPUT</p></div>
            <div class="output-buttons">
                <button class="btn text-light" @onclick="() => RawPrice = !RawPrice">Show price as @(RawPrice ? "facility" : "raw") materials</button>
                <button class="btn text-light" @onclick="() => ResetSelectedVehicles()">Reset all</button>
            </div>
        </div>

        <div class="output-categories">
            @foreach (string building in AssemblyVehicles.AssemblyNames)
            {
                if (SelectedVehicles.Count() == 0 || SelectedVehicles[building].Count() == 0)
                    continue;
                <div class="output-row">
                    <div class="output-top">
                        <div class="output-top-image" style="background-image: url(icons/Facility/AssemblyStation/@(building).png)"></div>
                        @if (SelectedVehicles.Count > 0)
                        {
                            <div class="output-top-items">
                                @foreach (string vehicle in SelectedVehicles[building])
                                {
                                    <button class="btn" style="background-image: url(icons/AssemblyStation/@(vehicle).png"
                                    @onmouseover="() => { HoveredItem = AssemblyVehicles.GetBuildingVehicles(building)[vehicle]; ItemInfoboxVisibility = true; InfoboxSimple = true; }"
                                    @onmousemove="() => ItemInfoboxVisibility = true" 
                                    @onmouseout="() => { HoveredItem = AssemblyVehicles.GetBuildingVehicles(building)[vehicle]; ItemInfoboxVisibility = false; }"
                                    @onclick="() => { SelectedVehicles[building].RemoveAt(SelectedVehicles[building].IndexOf(vehicle)); ItemInfoboxVisibility = false; }"></button>
                                }
                            </div>
                            <div class="output-item-count">@SelectedVehicles[building].Count()</div>
                        }
                    </div>

                    <div class="output-bottom">
                        @if (GetQueuePrice("Time", building) > 0)
                        {
                            <div style="background-image: @(GetTimestamp(GetQueuePrice("Time", building)).Length > 9 ? "" : "url(icons/Time.png)")">
                                @GetTimestamp(GetQueuePrice("Time", building))
                            </div>
                        }
                        @if (GetQueuePrice("MaterialBasic", building) > 0)
                        {
                            <div style="background-image: url(icons/ProductionIcons/MaterialBasic.png)">
                                @GetQueuePrice("MaterialBasic", building)
                            </div>
                        }
                        @if (GetQueuePrice("MaterialConstruction", building) > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialConstruction.png)">
                                @GetQueuePrice("MaterialConstruction", building)
                            </div>
                        }
                        @if (GetQueuePrice("MaterialProcessedConstruction", building) > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialProcessedConstruction.png)">
                                @GetQueuePrice("MaterialProcessedConstruction", building)
                            </div>
                        }
                        @if (GetQueuePrice("MaterialSteel", building) > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialSteel.png)">
                                @GetQueuePrice("MaterialSteel", building)
                            </div>
                        }
                        @for (int i = 0; i < AssemblyVehicles.AssmatAmount; i++)
                        {
                            @if (GetQueuePrice("AssemblyMaterials", building, i) > 0)
                            {
                                <div style="background-image: url(icons/Facility/AssemblyMaterialsT@(i+1).png)">
                                    @GetQueuePrice("AssemblyMaterials", building, i)
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>

        <div class="output-sum-background">
            <div class="output-sum">
                @if(!RawPrice)
                {
                    <div class="sum-top">
                        @if (GetQueuePrice("MaterialBasic") > 0)
                        {
                            <div style="background-image: url(icons/ProductionIcons/MaterialBasic.png)">
                                @GetQueuePrice("MaterialBasic")<span class="sum-pricename">&nbsp;BMs</span>
                            </div>
                        }
                        @if (GetQueuePrice("MaterialConstruction") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialConstruction.png)">
                                @GetQueuePrice("MaterialConstruction")<span class="sum-pricename">&nbsp;CMs</span>
                            </div>
                        }
                        @if (GetQueuePrice("MaterialProcessedConstruction") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialProcessedConstruction.png)">
                                @GetQueuePrice("MaterialProcessedConstruction")<span class="sum-pricename">&nbsp;PCMs</span>
                            </div>
                        }
                        @if (GetQueuePrice("MaterialSteel") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialSteel.png)">
                                @GetQueuePrice("MaterialSteel")<span class="sum-pricename">&nbsp;Steel</span>
                            </div>
                        }
                    </div>
                    <div class="sum-bottom">
                        @for (int i = 0; i < AssemblyVehicles.AssmatAmount; i++)
                        {
                            @if (GetQueuePrice("AssemblyMaterials", "all", i) > 0)
                            {
                                <div style="background-image: url(icons/Facility/AssemblyMaterialsT@(i+1).png)">
                                    @GetQueuePrice("AssemblyMaterials", "all", i)<span class="sum-pricename">&nbsp;A@(i + 1)s</span>
                                </div>
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="sum-top sum-top-raw">
                        @if (GetRawSumPrice("Salvage") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialRawSalvage.png)">
                                @GetRawSumPrice("Salvage")<span class="sum-pricename">&nbsp;Salvage</span>
                            </div>
                        }
                        @if (GetRawSumPrice("Components") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialRawComponents.png)">
                                @GetRawSumPrice("Components")<span class="sum-pricename">&nbsp;Comps</span>
                            </div>
                        }
                        @if (GetRawSumPrice("Coal") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialRawCoal.png)">
                                @GetRawSumPrice("Coal")<span class="sum-pricename">&nbsp;Coal</span>
                            </div>
                        }
                    </div>
                    <div class="sum-bottom sum-bottom-raw">
                        @if (GetRawSumPrice("Sulfur") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialRawSulfur.png)">
                                @GetRawSumPrice("Sulfur")<span class="sum-pricename">&nbsp;Sulfur</span>
                            </div>
                        }
                        @if (GetRawSumPrice("Oil") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialOilCrude.png)">
                                @GetRawSumPrice("Oil")<span class="sum-pricename">&nbsp;L Oil</span>
                            </div>
                        }
                        @if (GetRawSumPrice("Water") > 0)
                        {
                            <div style="background-image: url(icons/Facility/MaterialWater.png)">
                                @GetRawSumPrice("Water")<span class="sum-pricename">&nbsp;L Water</span>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<FacilityInfobox Building=@HoveredBuilding Visibility=@BuildingInfoboxVisibility />
<ItemInfobox Item=@HoveredItem SelectedCategory="Assembly" Visibility=@ItemInfoboxVisibility Simplified=@InfoboxSimple />


@code {
    public Dictionary<string, FacilityBuilding> AssemblyBuildings = new();

    public Dictionary<string, FacilityBuilding> AssemblyUpgrades = new();

    public AssemblyVehicleBuildings AssemblyVehicles = new();

    public FacilityBuilding HoveredBuilding { get; set; } = new();

    public string SelectedBuilding { get; set; } = "";

    public string SelectedUpgrade { get; set; } = "";

    public ProductionItem HoveredItem { get; set; } = new();

    public Dictionary<string, List<string>> SelectedVehicles { get; set; } = new();

    public bool RawPrice { get; set; } = false;

    public Dictionary<string, AssemblyRawCosts> MaterialRawCosts = new();

    public List<string> MaterialNames = new();

    public List<string> RawMaterialNames = new();

    public bool BuildingInfoboxVisibility { get; set; }

    public bool ItemInfoboxVisibility { get; set; }

    public bool InfoboxSimple { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.InvokeVoidAsync("startInfoboxTracking");

        AssemblyBuildings = await Http.GetFromJsonAsync<Dictionary<string, FacilityBuilding>>("data/AssemblyStation/AssemblyBuildingData.json") ?? throw new FileNotFoundException();

        AssemblyUpgrades = await Http.GetFromJsonAsync<Dictionary<string, FacilityBuilding>>("data/AssemblyStation/AssemblyUpgradeData.json") ?? throw new FileNotFoundException();

        AssemblyVehicles = await Http.GetFromJsonAsync<AssemblyVehicleBuildings>("data/AssemblyStation/AssemblyVehicleData.json") ?? throw new FileNotFoundException();

        MaterialRawCosts = await Http.GetFromJsonAsync<Dictionary<string, AssemblyRawCosts>>("data/AssemblyStation/AssemblyRawCostData.json") ?? throw new FileNotFoundException();

        MaterialNames = MaterialRawCosts.Keys.ToList();

        RawMaterialNames = new() { "Salvage", "Components", "Sulfur", "Coal", "Oil", "Water" };

        // Default parameters
        SelectedBuilding = "AssemblyStation";

        SelectedUpgrade = "";

        ResetSelectedVehicles();
    }

    public void ResetSelectedVehicles()
    {
        SelectedVehicles.Clear();
        foreach (string building in AssemblyVehicles.AssemblyNames) {
            SelectedVehicles.Add(building, new List<string>());
        }
    }

    public string GetTimestamp(double seconds)
    {
        TimeSpan vehicleTime = TimeSpan.FromSeconds(seconds);

        if (vehicleTime.Days > 0)
            return vehicleTime.ToString(@"d\:hh\:mm\:ss");
        else
            return vehicleTime.ToString(@"h\:mm\:ss");
    }

    public double GetQueuePrice(string materialKey, string vehicleBuilding = "all", int AssmatIndex = 0)
    {
        double queuePrice = 0;

        if (SelectedVehicles.Count() > 0)
        {
            ProductionItem vehicleInfo = new();

            if (vehicleBuilding == "all")
            {
                foreach (string category in AssemblyVehicles.AssemblyNames)
                {
                    queuePrice += GetQueuePrice(materialKey, category, AssmatIndex);
                }
            }
            else
            {
                foreach (string item in SelectedVehicles[vehicleBuilding])
                {
                    vehicleInfo = AssemblyVehicles.GetBuildingVehicles(vehicleBuilding)[item];

                    switch (materialKey)
                    {
                        case "MaterialBasic":
                            queuePrice += vehicleInfo.BmatCost;
                            break;
                        case "MaterialConstruction":
                            queuePrice += vehicleInfo.CmatCost;
                            break;
                        case "MaterialProcessedConstruction":
                            queuePrice += vehicleInfo.PCmatCost;
                            break;
                        case "MaterialSteel":
                            queuePrice += vehicleInfo.SteelCost;
                            break;
                        case "AssemblyMaterials":
                            queuePrice += vehicleInfo.AssmatCost[AssmatIndex];
                            break;
                        case "Time":
                            queuePrice += vehicleInfo.ProductionTime;
                            break;
                        default:
                            queuePrice += 0;
                            break;
                    }
                }
            }
        }

        return queuePrice;
    }

    public double GetRawMatPrice(string materialKey, string rawMaterialKey, double amount)
    {
        double itemPrice = 0;

        AssemblyRawCosts materialInfo = new();

        materialInfo = MaterialRawCosts[materialKey];

        switch (rawMaterialKey)
        {
            case "Salvage":
                itemPrice += materialInfo.SalvageCost;
                break;
            case "Components":
                itemPrice += materialInfo.ComponentCost;
                break;
            case "Sulfur":
                itemPrice += materialInfo.SulfurCost;
                break;
            case "Coal":
                itemPrice += materialInfo.CoalCost;
                break;
            case "Oil":
                itemPrice += materialInfo.OilCost;
                break;
            case "Water":
                itemPrice += materialInfo.WaterCost;
                break;
            default:
                itemPrice += 0;
                break;
        }

        return itemPrice * amount;
    }

    public double GetRawSumPrice(string materialKey)
    {
        double rawSum = 0;

        foreach(string material in MaterialNames)
        {
            if(material.StartsWith("AssemblyMaterialsT"))
                rawSum += GetRawMatPrice(material, materialKey, GetQueuePrice("AssemblyMaterials", "all", Int32.Parse(material.Substring(material.Length - 1)) - 1));
            else 
                rawSum += GetRawMatPrice(material, materialKey, GetQueuePrice(material));
        }

        return rawSum;
    }
}