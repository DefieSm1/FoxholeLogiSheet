@page "/factory"

<PageTitle>@ProductionMode Sheet</PageTitle>

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IConfiguration AppConfig
@using FoxholeLogiSheet.Data

<PageHeader>@ProductionMode Sheet</PageHeader>
<ProductionContainer>
	<CalculatorContainer>
		<CalculatorHeader Text="PRODUCTION">
			<HeaderButton Text=@($"Switch to {(ProductionMode == "Factory" ? "MPF" : "Factory")} mode") ParentMethod=@FlipProductionMode />
		</CalculatorHeader>
		<CategorySelect Categories=CurrentCategories() SelectedCategory=@SelectedCategory OnButtonClick=ChangeCategory />
		<ItemGrid>
			@if (!String.IsNullOrEmpty(SelectedCategory))
			{
				@foreach (KeyValuePair<string, ProductionItem> item in CurrentCategory)
				{
					<ItemButton ItemName=@item.Key Category=@SelectedCategory Disabled=@(CheckIfDisabled(SelectedCategory, item.Key)) IconSet="items"
								OnMouseOver="() => { HoveredItem = CurrentCategory[item.Key]; TooltipVisibility = true; TooltipSimplified = false; StateHasChanged(); }"
								OnMouseOut="() => { HoveredItem = CurrentCategory[item.Key]; TooltipVisibility = false; StateHasChanged(); }"
								OnButtonClick="(e) => AddItem(e, SelectedCategory, item.Key)" />
				}
			}
		</ItemGrid>
	</CalculatorContainer>
	<CalculatorContainer Height="initial">
		<CalculatorHeader Text="OUTPUT">
			<HeaderButton Text=@($"Show price in {(PriceInCrates ? "Units" : "Crates")}") ParentMethod=@(() => PriceInCrates = !PriceInCrates) />
			<HeaderButton Text="Reset all" ParentMethod=@ResetSelectedItems />
		</CalculatorHeader>
		<OutputContainer>
			@foreach (string category in CurrentCategories())
			{
				if (SelectedItems.Count() == 0) break;

				<OutputRow ItemKeys=SelectedItems[category] CategoryKey=@category
						   OnMouseOver="(itemKey) => { HoveredItem = ItemCategories[category][itemKey]; TooltipVisibility = true; TooltipSimplified = true; StateHasChanged(); }"
						   OnMouseOut="(itemKey) => { HoveredItem = ItemCategories[category][itemKey]; TooltipVisibility = false; StateHasChanged(); }"
						   OnButtonClick="(itemKey, itemNumber) => { SelectedItems[category].RemoveAt(itemNumber); TooltipVisibility = false; StateHasChanged(); }">
					@foreach (string key in MaterialKeys)
					{
						@if (GetQueuePrice(key, category) == 0) continue;
						<PriceBox MaterialTag=@key PriceInCrates=@PriceInCrates QueuePrice=@GetQueuePrice(key, category) />
					}
				</OutputRow>
			}
		</OutputContainer>
		<OutputPriceSumContainer Columns=4>
			@foreach (string key in MaterialKeys)
			{
				@if (key == "Time") continue;
				@if (GetQueuePrice(key) == 0) continue;
				<PriceBox MaterialTag=@key PriceInCrates=@PriceInCrates QueuePrice=@GetQueuePrice(key) />
			}
		</OutputPriceSumContainer>
	</CalculatorContainer>
</ProductionContainer>

<ItemTooltip Item=@HoveredItem CurrentBuilding=@ProductionMode SelectedCategory=@SelectedCategory Visibility=@TooltipVisibility Simplified=@TooltipSimplified MaterialKeys=@MaterialKeys />

@code {
	public FactoryConfig Config { get; set; } = new();

	public Dictionary<string, Dictionary<string, ProductionItem>> ItemCategories { get; set; } = new();

	public List<string> FactoryCategories { get => Config.FactoryCategories; }

	public List<string> MPFCategories { get => Config.MPFCategories; }

	public List<string> MaterialKeys { get => Config.MaterialKeys; }

	Dictionary<string, List<string>> SelectedItems = new();

	public string ProductionMode { get; set; } = "";

	public string SelectedCategory { get; set; } = "";

	public bool PriceInCrates { get; set; } = false;

	public ProductionItem HoveredItem { get; set; } = new();

	public bool TooltipVisibility { get; set; } = false;

	public bool TooltipSimplified { get; set; } = false;

	public Dictionary<string, ProductionItem> CurrentCategory { get => ItemCategories[SelectedCategory]; }

	protected override async Task OnInitializedAsync()
	{
		await localStorage.SetItemAsync("lastPage", "factory");

		Config = AppConfig.GetSection("factory").Get<FactoryConfig>() ?? throw new InvalidOperationException("Could not find requested configuration");
		List<string> categoriesToLoad = Config.LoadedCategories;

		Dictionary<string, ProductionItem> category;
		foreach (string categoryName in categoriesToLoad)
		{
			category = await Http.GetFromJsonAsync<Dictionary<string, ProductionItem>>($"data/ProductionData/{categoryName}.json") ?? throw new FileNotFoundException(); ;
			ItemCategories.Add(categoryName, category);
		}

		ProductionMode = Config.DefaultMode;
		SelectedCategory = Config.DefaultCategory;

		ResetSelectedItems();
	}

	public void ResetSelectedItems()
	{
		SelectedItems.Clear();
		foreach (string category in CurrentCategories())
			SelectedItems.Add(category, new());
	}

	public bool CheckIfDisabled(string itemCategory, string itemKey)
	{
		if (ProductionMode != "MPF")
			return false;

		if (SelectedItems[itemCategory].Count() == (itemCategory == "Vehicles" || itemCategory == "Structures" ? 5 : 9))
			return true;

		if (SelectedItems[itemCategory].Count() > 0)
			return !(SelectedItems[itemCategory].Contains(itemKey));

		return false;
	}

	public void AddItem(MouseEventArgs e, string category, string item)
	{
		if (CheckIfDisabled(category, item)) return;

		if (!e.ShiftKey)
		{
			SelectedItems[category].Add(item);
			StateHasChanged();
			return;
		}

		if (ProductionMode == "Factory")
		{
			SelectedItems[category].AddRange(Enumerable.Repeat(item, 4));
			StateHasChanged();
			return;
		}

		if (ProductionMode == "MPF")
		{
			bool isVehicleOrStructure = (category == "Vehicles" || category == "Structures");
			SelectedItems[category] = Enumerable.Repeat(item, isVehicleOrStructure ? 5 : 9).ToList<string>();
			StateHasChanged();
			return;
		}
	}

	public void FlipProductionMode()
	{
		if (ProductionMode == "MPF")
		{
			ProductionMode = "Factory";
			if (!FactoryCategories.Contains(SelectedCategory))
				SelectedCategory = "SmallArms";
		}
		else
		{
			ProductionMode = "MPF";
			if (!MPFCategories.Contains(SelectedCategory))
				SelectedCategory = "SmallArms";
		}

		ResetSelectedItems();
	}

	public List<string> CurrentCategories()
	{
		if (ProductionMode == "Factory") return FactoryCategories;
		if (ProductionMode == "MPF") return MPFCategories;
		return new List<string>();
	}

	public void ChangeCategory(string category) {

		SelectedCategory = category;
		StateHasChanged();
	}

	public double GetQueuePrice(string materialKey, string itemCategory = "all")
	{
		double queuePrice = 0;

		if (SelectedItems.Count() <= 0)
			return 0;

		if (itemCategory == "all")
		{
			foreach (string category in CurrentCategories())
				queuePrice += GetQueuePrice(materialKey, category);

			return queuePrice;
		}

		bool isVehicleOrStructure = (itemCategory == "Vehicles" || itemCategory == "Shippables");
		double currentDiscount = 0;
		ProductionItem itemInfo = new();
		int itemIndex = 0;

		foreach (string item in SelectedItems[itemCategory])
		{
			currentDiscount = ProductionMode == "MPF" ? 1 - 0.1 * Math.Min(++itemIndex, 5) : 1;
			itemInfo = ItemCategories[itemCategory][item];

			double crateSize = isVehicleOrStructure ? itemInfo.CrateSize : 1;

			queuePrice += materialKey switch
			{
				"Time" => itemInfo.ProductionTime * (ProductionMode == "MPF" ? isVehicleOrStructure ? 1 : 10 : 1),
				"MaterialBasic" => Math.Floor(itemInfo.BmatCost * currentDiscount * crateSize),
				"MaterialExplosive" => Math.Floor(itemInfo.EmatCost * currentDiscount * crateSize),
				"MaterialRefined" => Math.Floor(itemInfo.RmatCost * currentDiscount * crateSize),
				"MaterialHeavyExplosive" => Math.Floor(itemInfo.HematCost * currentDiscount * crateSize),
				_ => 0
			};
		}
		return queuePrice;
	}
}
